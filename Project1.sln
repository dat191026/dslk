#include <iostream>
using namespace std;

// Cấu trúc Node
struct Node {
    int data; // Giá trị dữ liệu
    Node* next; // Con trỏ tới Node tiếp theo
};

// Cấu trúc danh sách liên kết
struct DanhSachLienKet {
    Node* head; // Con trỏ đầu danh sách
};

// Khoi tao danh sach
void khoiTaoDanhSach(DanhSachLienKet& danhSach) {
    danhSach.head = NULL; // Thay thế nullptr bằng NULL
}

// Huy danh sach
void huyDanhSach(DanhSachLienKet& danhSach) {
    Node* hienTai = danhSach.head;
    while (hienTai != NULL) { // Thay thế nullptr bằng NULL
        Node* tam = hienTai;
        hienTai = hienTai->next;
        delete tam;
    }
    danhSach.head = NULL; // Thay thế nullptr bằng NULL
}

// Them phan tu vao danh sach
void themPhanTu(DanhSachLienKet& danhSach, int giaTri) {
    Node* nutMoi = new Node;
    nutMoi->data = giaTri;
    nutMoi->next = NULL; // Thay thế nullptr bằng NULL

    if (danhSach.head == NULL) { // Thay thế nullptr bằng NULL
        danhSach.head = nutMoi;
    }
    else {
        Node* hienTai = danhSach.head;
        while (hienTai->next != NULL) { // Thay thế nullptr bằng NULL
            hienTai = hienTai->next;
        }
        hienTai->next = nutMoi;
    }
}

// Xoa phan tu khoi danh sach
void xoaPhanTu(DanhSachLienKet& danhSach, int giaTri) {
    Node* hienTai = danhSach.head;
    Node* truocDo = NULL; // Thay thế nullptr bằng NULL

    while (hienTai != NULL) { // Thay thế nullptr bằng NULL
        if (hienTai->data == giaTri) {
            if (truocDo == NULL) { // Thay thế nullptr bằng NULL
                danhSach.head = hienTai->next;
            }
            else {
                truocDo->next = hienTai->next;
            }
            delete hienTai;
            return;
        }
        truocDo = hienTai;
        hienTai = hienTai->next;
    }
}

// Them danh sach thu hai vao danh sach thu nhat
void themDanhSach(DanhSachLienKet& danhSach1, DanhSachLienKet& danhSach2) {
    if (danhSach1.head == NULL) { // Thay thế nullptr bằng NULL
        danhSach1.head = danhSach2.head;
    }
    else {
        Node* hienTai = danhSach1.head;
        while (hienTai->next != NULL) { // Thay thế nullptr bằng NULL
            hienTai = hienTai->next;
        }
        hienTai->next = danhSach2.head;
    }
    danhSach2.head = NULL; // Làm rỗng danh sách thứ hai
}

// In danh sach
void inDanhSach(DanhSachLienKet& danhSach) {
    Node* hienTai = danhSach.head;
    while (hienTai != NULL) { // Thay thế nullptr bằng NULL
        cout << hienTai->data << " ";
        hienTai = hienTai->next;
    }
    cout << endl;
}

// Chuong trinh chinh
int main() {
    DanhSachLienKet danhSach1, danhSach2;
    khoiTaoDanhSach(danhSach1);
    khoiTaoDanhSach(danhSach2);

    // Nhập 10 số nguyên vào danh sách
    cout << "Nhap 10 so nguyen: ";
    for (int i = 0; i < 10; i++) {
        int giaTri;
        cin >> giaTri;
        themPhanTu(danhSach1, giaTri);
    }

    // In danh sách
    cout << "Danh sach sau khi nhap: ";
    inDanhSach(danhSach1);

    // Nhập số k và xóa số k
    cout << "Nhap so can xoa: ";
    int k;
    cin >> k;
    xoaPhanTu(danhSach1, k);

    cout << "Danh sach sau khi xoa: ";
    inDanhSach(danhSach1);

    // Nhập 5 số nguyên vào danh sách thứ hai
    cout << "Nhap 5 so nguyen cho danh sach thu hai: ";
    for (int i = 0; i < 5; i++) {
        int giaTri;
        cin >> giaTri;
        themPhanTu(danhSach2, giaTri);
    }

    // Thêm danh sách thứ hai vào danh sách thứ nhất
    themDanhSach(danhSach1, danhSach2);

    // In danh sách thứ nhất sau khi gộp
    cout << "Danh sach sau khi gop: ";
    inDanhSach(danhSach1);

    // Hủy danh sách
    huyDanhSach(danhSach1);
    huyDanhSach(danhSach2);

    return 0;
}
